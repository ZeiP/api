'use strict';
// tests for authJwtAuthorizer
// Generated by serverless-mocha-plugin

const mod         = require('../functions/auth/jwtAuthorizer.js');
const mochaPlugin = require('serverless-mocha-plugin');
const wrapper     = mochaPlugin.lambdaWrapper;
const expect      = mochaPlugin.chai.expect;
const auth        = require('../lib/auth.js');

const liveFunction = {
  region: process.env.SERVERLESS_REGION,
  lambdaFunction: process.env.SERVERLESS_PROJECT + '-authJwtAuthorizer'
}

describe('authJwtAuthorizer', () => {
  before(function (done) {
//  wrapper.init(liveFunction); // Run the deployed lambda
    wrapper.init(mod, {
      handler: 'handler'
    });

    done()
  })

  it('throws error with no token', (done) => {
    wrapper.run({}, (err, response) => {
      expect(err).is.not.null;
      expect(err.message).to.equal('No Token Present');
      done();
    });
  });

  it('throws error with bad token', (done) => {
    wrapper.run({
      authorizationToken: 'iamnotarealtoken',
      methodArn: 'arn:aws:execute-api:us-east-1:583172113704:j6vxshd7e8/null/GET/'
    }, (err, response) => {
      expect(err).is.not.null;
      expect(err.message).to.equal('jwt malformed');
      done();
    });
  });

  it('returns valid policy with valid token', (done) => {
    var steamId = 'blah';
    const token = auth.sign(steamId);

    wrapper.run({
      authorizationToken: token,
      methodArn: 'arn:aws:execute-api:us-east-1:583172113704:j6vxshd7e8/null/GET/'
    }, (err, response) => {
      expect(err).is.null;
      expect(response.principalId).to.equal(steamId);

      const statement = response.policyDocument.Statement[0];
      expect(statement.Action).to.equal('execute-api:Invoke');
      expect(statement.Effect).to.equal(statement.Effect, 'Allow');
      expect(statement.Resource).to.equal('arn:aws:execute-api:us-east-1:583172113704:j6vxshd7e8/*');
      done();
    });
  });
});
