# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: civ-serverless-api

plugins:
  - serverless-mocha-plugin
  - serverless-plugin-write-env-vars
  - export-api-url

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  iamRoleStatements: # We should tighten this up...
    - Effect: Allow
      Action: "*"
      Resource: "*"
custom:
  activeStage: ${opt:stage, self:provider.stage}
  resourcePrefix: ${self:custom.activeStage}-civx-
  DEV_WEB_URL: "http://localhost:8080"
  dev_DYNAMO_CAPACITY: 1
  prod_DYNAMO_CAPACITY: 5
  DEFAULT_DYNAMO_CAPACITY: ${self:custom.${self:custom.activeStage}_DYNAMO_CAPACITY}
  writeEnvVars:
    SERVERLESS_STAGE: ${self:custom.activeStage}
    RESOURCE_PREFIX: ${self:custom.resourcePrefix}
    WEB_URL: ${env:WEB_URL, self:custom.DEV_WEB_URL}


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can overwrite defaults here
#defaults:
#  stage: dev
#  region: us-east-1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  jwtAuthorizer:
    handler: functions/auth/jwt.handler
    memorySize: 128
  cronCheckTurnTimerJobs:
    handler: functions/cron/checkTurnTimerJobs.handler
    memorySize: 128
    events:
      - schedule: rate(2 minutes)
  snsAddTurnTimer:
    handler: functions/sns/addTurnTimerJob.handler
    memorySize: 128
    events:
      - sns: ${self:custom.resourcePrefix}turn-submitted
  snsEmailTurnNotification:
    handler: functions/sns/emailTurnNotification.handler
    memorySize: 128
    events:
      - sns: ${self:custom.resourcePrefix}turn-submitted
  snsUpdateUserGameCache:
    handler: functions/sns/updateUserGameCache.handler
    memorySize: 128
    events:
      - sns: ${self:custom.resourcePrefix}turn-submitted
  authSteamAuthenticate:
    handler: functions/http/auth/steamAuthenticate.handler
    memorySize: 128
    events:
      - http:
          path: auth/steam
          method: get
          integration: lambda
          cors: true
  authSteamValidate:
    handler: functions/http/auth/steamValidate.handler
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: auth/steam/validate
          method: get
          integration: lambda
          cors: true
  game:
    handler: functions/http/game/get.handler
    memorySize: 128
    events:
      - http:
          path: game/{gameId}
          method: get
          integration: lambda
          cors: true
  gameCreate:
    handler: functions/http/game/create.handler
    memorySize: 128
    events:
      - http:
          path: game/create
          method: post
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  gameJoin:
    handler: functions/http/game/join.handler
    memorySize: 128
    events:
      - http:
          path: game/{gameId}/join
          method: post
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  gameStart:
    handler: functions/http/game/start.handler
    memorySize: 128
    events:
      - http:
          path: game/{gameId}/start
          method: post
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  gameTurnGet:
    handler: functions/http/game/turn/get.handler
    memorySize: 128
    events:
      - http:
          path: game/{gameId}/turn
          method: get
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  gameTurnRevert:
    handler: functions/http/game/turn/revert.handler
    memorySize: 128
    events:
      - http:
          path: game/{gameId}/turn/revert
          method: post
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  gameTurnStartSubmit:
    handler: functions/http/game/turn/startSubmit.handler
    memorySize: 128
    events:
      - http:
          path: game/{gameId}/turn/startSubmit
          method: post
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  gameTurnFinishSubmit:
    handler: functions/http/game/turn/finishSubmit.handler
    memorySize: 128
    timeout: 15
    events:
      - http:
          path: game/{gameId}/turn/finishSubmit
          method: post
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  user:
    handler: functions/http/user/get.handler
    memorySize: 128
    events:
      - http:
          path: user
          method: get
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  userGames:
    handler: functions/http/user/games.handler
    memorySize: 128
    events:
      - http:
          path: user/games
          method: get
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  userSetNotificationEmail:
    handler: functions/http/user/setNotificationEmail.handler
    memorySize: 128
    events:
      - http:
          path: user/setNotificationEmail
          method: post
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  userSteamProfile:
    handler: functions/http/user/steamProfile.handler
    memorySize: 128
    events:
      - http:
          path: user/steamProfile
          method: get
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true
  userSteamProfiles:
    handler: functions/http/user/steamProfiles.handler
    memorySize: 128
    events:
      - http:
          path: user/steamProfiles
          method: get
          integration: lambda
          authorizer: jwtAuthorizer
          cors: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    GameSavesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.resourcePrefix}saves
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - "*" # We should change this when we know what our domain is...
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: steamId
            AttributeType: S
        KeySchema:
          - AttributeName: steamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
          WriteCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
        TableName: ${self:custom.resourcePrefix}user
    GameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
          WriteCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
        TableName: ${self:custom.resourcePrefix}game
    GameTurnTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
          - AttributeName: turn
            AttributeType: N
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
          - AttributeName: turn
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
          WriteCapacityUnits: ${self:custom.DEFAULT_DYNAMO_CAPACITY}
        TableName: ${self:custom.resourcePrefix}game-turn
    ScheduledJobTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: jobType
            AttributeType: S
          - AttributeName: scheduledTime
            AttributeType: N
        KeySchema:
          - AttributeName: jobType
            KeyType: HASH
          - AttributeName: scheduledTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.resourcePrefix}scheduled-job
