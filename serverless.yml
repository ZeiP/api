# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: civ-serverless-api

plugins:
  - serverless-mocha-plugin
  - serverless-plugin-write-env-vars
  - export-api-url

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action: "*"
      Resource: "*"
custom:
  activeStage: ${opt:stage, self:provider.stage}
  resourcePrefix: ${self:custom.activeStage}-civx-
  writeEnvVars:
    SERVERLESS_STAGE: ${self:custom.activeStage}
    RESOURCE_PREFIX: ${self:custom.resourcePrefix}


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can overwrite defaults here
#defaults:
#  stage: dev
#  region: us-east-1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  authJwtAuthorizer:
    handler: functions/auth/jwtAuthorizer.handler
  authSteamAuthenticate:
    handler: functions/auth/steamAuthenticate.handler
    events:
      - http:
          path: auth/steam
          method: get
          cors: true
  authSteamValidate:
    handler: functions/auth/steamValidate.handler
    events:
      - http:
          path: auth/steam/validate
          method: get
          cors: true
  game:
    handler: functions/game/get.handler
    events:
      - http:
          path: game/{gameId}
          method: get
          authorizer: authJwtAuthorizer
          cors: true
  gameCreate:
    handler: functions/game/create.handler
    events:
      - http:
          path: game/create
          method: post
          authorizer: authJwtAuthorizer
          cors: true
  gameJoin:
    handler: functions/game/join.handler
    events:
      - http:
          path: game/{gameId}/join
          method: post
          authorizer: authJwtAuthorizer
          cors: true
  userGames:
    handler: functions/user/games.handler
    events:
      - http:
          path: user/games
          method: get
          authorizer: authJwtAuthorizer
          cors: true
  userSteamProfiles:
    handler: functions/user/steamProfiles.handler
    events:
      - http:
          path: user/steamProfiles
          method: get
          authorizer: authJwtAuthorizer
          cors: true

#    you can add any of the following events
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env.BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic

# you can add CloudFormation resource templates here
resources:
  Resources:
    GameSavesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.resourcePrefix}saves
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: steamId
            AttributeType: S
        KeySchema:
          - AttributeName: steamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.resourcePrefix}user
    GameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.resourcePrefix}game
    GameTurnTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
          - AttributeName: turnId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
          - AttributeName: turnId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.resourcePrefix}game-turn
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
